{"uid":"1505a5577bf5ccff","name":"Registration function - empty email","fullName":"test.e2e.test_registration.TestRegistrationFunctionality#test_registration_with_empty_email","historyId":"18476cace59dde9631d7a0ddb1e3312a","time":{"start":1707456972536,"stop":1707456972906,"duration":370},"description":"Assert that user gets correct error message on failing to fill in the email input field","descriptionHtml":"<p>Assert that user gets correct error message on failing to fill in the email input field</p>\n","status":"failed","statusMessage":"AssertionError: assert False","statusTrace":"self = <test_registration.TestRegistrationFunctionality object at 0x7fb280a8cbf0>\nget_test_cycle = <libs.basics.docs_classes.TestCycle object at 0x7fb280b4fc20>\n\n    def test_registration_with_empty_email(self, get_test_cycle):\n    \n    \t# TODO once fixed\n    \texpected_error_message = 'Érvénytelen email cím!'\n    \n    \ttc = TestCase(name='Registration function - empty email',\n    \t\t\t\t\tobjective='Assert that user gets correct error message on failing to fill in the email input field',\n    \t\t\t\t\tprecondition='Registration page loads, database is available',\n    \t\t\t\t\tpriority='Normal',\n    \t\t\t\t\tfolder=TC_FOLDER)\n    \tget_test_cycle.add_test_case(tc)\n    \tallure.dynamic.title(tc.name)\n    \tallure.dynamic.description(tc.objective)\n    \tallure.dynamic.severity(priority_zephyr_to_allure(tc.priority))\n    \tallure.dynamic.label('suite', get_test_cycle.name)\n    \tallure.dynamic.tag('frontend')\n    \tallure.dynamic.tag('registration')\n    \tallure.dynamic.tag('negative')\n    \n    \tself.user.set_email('')\n    \tts = fill_out_form(self.page, self.user)\n    \n    \ttc.add_test_step(ts)\n    \tts.append_to_test_data(f'Expected error message: {expected_error_message}')\n    \tts.set_expected_result('The submit button is disabled and the correct error message is shown')\n    \n    \tassert_button_and_error_message = (not self.page.button_submit().is_enabled()\n    \t\t\t\t\t\t\t  and self.page.error_message_email().text == expected_error_message)\n    \tts.set_status('passed' if assert_button_and_error_message else 'failed')\n>   \tassert assert_button_and_error_message\nE    assert False\n\ntest/e2e/test_registration.py:206: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1707456942749,"stop":1707456942768,"duration":19},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"get_test_cycle","time":{"start":1707456942768,"stop":1707456942768,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_xunit_setup_method_fixture_TestRegistrationFunctionality","time":{"start":1707456969530,"stop":1707456972535,"duration":3005},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"_xunit_setup_method_fixture_TestRegistrationFunctionality::0","time":{"start":1707456972915,"stop":1707456972972,"duration":57},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"get_test_cycle::0","time":{"start":1707457018943,"stop":1707457018944,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"severity","value":"Normal"},{"name":"suite","value":"Registration page"},{"name":"tag","value":"frontend"},{"name":"tag","value":"registration"},{"name":"tag","value":"negative"},{"name":"parentSuite","value":"test.e2e"},{"name":"subSuite","value":"TestRegistrationFunctionality"},{"name":"host","value":"fv-az1196-692"},{"name":"thread","value":"2285-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test.e2e.test_registration"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["negative","registration","frontend"]},"source":"1505a5577bf5ccff.json","parameterValues":[]}